model
: name      = email
: help...
    ---
    I am used to manage emails.  This allows the application to easily create an email
    as part of a database transaction, and to subsequently send (and re-send) the email
    as needed.  This also provides a convenient log of email that were previously sent.
    ---

database
: auditLog  = true
: locking   = true

    index
    : name  = status
    : on    = statusCode
    : on    = createdUtcTs

attributes

    //*****************************************************
    //** basics
    //*****************************************************


    #include basicUid.stf
    #include basicTimestamps.stf


    //*****************************************************
    //** details
    //*****************************************************


    field
    : name      = sentUtcTs
    : help      = The date and time when the email was last sent.
    : type      = timestamp


    field
    : name      = subject
    : help      = The subject line.
    : type      = text200


    field
    : name      = fromAddress
    : help      = The from address.
    : type      = email
    : label     = From


    field
    : name      = statusCode
    : help      = The status: draft, ready, pending, sent, error, ignored.
    : type      = longEnumCode
    : required  = true

        enum
            value(#Draft)
            value(#Ready)
            value(#Pending)
            value(#Sent)
            value(#Error)
            value(#Ignored)


    field
    : name      = errorNotes
    : help      = Any notes about the error condition.
    : type      = multiline100


    //*****************************************************
    //** display
    //*****************************************************


    abstractField
    : name      = recipientSummary
    : help      = A summary of the recipients.
    : type      = notes


    abstractField
    : name      = toAddressesLabel
    : help      = A summary of the to addresses.
    : type      = notes
    : label     = To


    abstractField
    : name      = ccAddressesLabel
    : help      = A summary of the to addresses.
    : type      = notes
    : label     = Cc


    //*****************************************************
    //** children
    //*****************************************************


    collection
    : name          = recipient
    : comment       = The addresses that this email is sent to.
    : relation      = children
    : elementModel  = emailRecipient
    : elementField  = email


    collection
    : name          = part
    : comment       = The parts include the body and any attachments.
    : relation      = children
    : elementModel  = emailPart
    : elementField  = email


    //*****************************************************
    //** html
    //*****************************************************


    abstractField
    : name      = partsAsHtml
    : help      = A summary of the parts, suitable for html literals.
    : type      = notes
    : label     = parts

