model
: name      = auditLog
: help...
    ---
    I maintain a log of changes made to the domain.  Each record identify a single
    attribute that has been modified on a given model.  For example, a single
    record may record that the user John Doe changed the Widget's price to $13.00
    on Jan 1, 2015.

    This is intended to be a historical archive that can be easily exported to a
    third-party reporting.  All records must be immutable; records can be added,
    but not modified.
    ---

database
: auditLog  = false
: locking   = false

    index
    : name      = domainField
    : unique    = false
    : on        = domainUid
    : on        = fieldName
    : on        = createdUtcTs

    index
    : name      = bundle
    : unique    = false
    : on        = domainBundleUid
    : on        = uid

    index
    : name      = domainType
    : unique    = false
    : on        = domainType


attributes


    //*****************************************************
    //** basics
    //*****************************************************


    #include basicUid.stf


    field
    : name      = createdUtcTs
    : help      = The time this change was made.
    : type      = timestamp
    : default   = nowUtc()
    : required  = true


    //*****************************************************
    //** transaction
    //*****************************************************


    field
    : name          = transactionUid
    : help          = A unique identifier of the database transaction.
    : type          = uid
    : required      = true


    //*****************************************************
    //** user
    //*****************************************************


    association
    : name      = user
    : help      = The user that made this change.  May be null for automated updates.
    : modelName = user
    : relation  = reference
    : required  = false


    field
    : name      = userName
    : help      = The user's name (denormalized).
    : type      = name
    : required  = false

        dependsOn
        : value = user


    //*****************************************************
    //** type
    //*****************************************************


    field
    : name      = typeCode
    : help      = The type of change.
    : type      = longEnumCode
    : required  = true

        enum
            value(#Add)
            value(#Update)
            value(#Delete)


    //*****************************************************
    //** domain
    //*****************************************************


    field
    : name      = domainType
    : help      = The type of domain; e.g.: project, depot, etc.
    : type      = name
    : required  = true


    abstractField
    : name      = domainTypeLabel
    : help...
        ---
        A more friendly format of the domain type.
        E.g.: project => Project; salesOrderLine => Sales Order Line; etc.
        ---
    : type      = calculated


    field
    : name      = domainName
    : help...
        ---
        The common, but non-unique name of the domain.
        Models generally rely on long UIDs as their unique identifier so
        we also store a domain's display string as a 'name'.  Although this name
        is not guaranteed to be unique, it is generally human-readable and is usually
        sufficient to identify which domain was affected.
        ---
    : type      = name
    : required  = true


    field
    : name      = domainUid
    : help      = The unique id of the domain model.
    : type      = uid
    : required  = true


    field
    : name      = domainBundleUid
    : help...
        ---
        I am used to identity a bundle of logs related to a particular domain.
        In many cases, a particular domain will have multiple fields modified at the
        same time.  The bundle identifies this group of changes.  Sometimes multiple
        bundles may occur within the same transaction for the same domain.
        ---
    : type      = uid
    : required  = true


    //*****************************************************
    //** field
    //*****************************************************


    field
    : name      = fieldName
    : help...
        ---
        The name of the field that was modified.
        This is effectively the java/database name.
        For example: count, phone, primaryShippingAddress.
        ---
    : type      = name
    : required  = true


    abstractField
    : name      = fieldNameLabel
    : help...
        ---
        A more friendly format of the field name.
        E.g.: count => Count; primaryShippingAddress => Primary Shipping Address; etc.
        ---
    : type      = calculated


    //*****************************************************
    //** value
    //*****************************************************


    field
    : name      = newValue
    : help      = A human readable summary of the new/current value.
    : type      = multiline100
    : required  = true


    field
    : name      = oldValue
    : help      = A human readable summary of the old/previous value.
    : type      = multiline100
    : required  = true


    field
    : name      = stringValue
    : help      = The truncated string value, if applicable.
    : type      = multiline1000
    : required  = false


    field
    : name      = integerValue
    : help      = The integer value, if applicable.
    : type      = integer
    : required  = false


    field
    : name      = longValue
    : help      = The long value, if applicable.
    : type      = long
    : required  = false


    field
    : name      = doubleValue
    : help      = The double value, if applicable.
    : type      = double
    : required  = false


    field
    : name      = moneyValue
    : help      = The money value, if applicable.
    : type      = money
    : required  = false


    field
    : name      = booleanValue
    : help      = The boolean value, if applicable.
    : type      = boolean
    : required  = false


    field
    : name      = dateValue
    : help      = The date value, if applicable.
    : type      = date
    : required  = false


    field
    : name      = timestampValue
    : help      = The timestamp value, if applicable.
    : type      = timestamp
    : required  = false


    field
    : name      = uidValue
    : help      = The foreign key reference uid, if applicable.
    : type      = uid
    : required  = false


