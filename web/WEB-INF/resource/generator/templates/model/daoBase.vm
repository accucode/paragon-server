${javaAutoGenerationComment}

package ${package}.dao.base;

import com.kodemore.collection.*;
import com.kodemore.dao.*;
import com.kodemore.utility.*;

import ${package}.criteria.*;
import ${package}.dao.base.*;
import ${package}.dao.core.*;
import ${package}.filter.*;
import ${package}.model.*;
import ${package}.model.meta.*;
import ${package}.utility.*;

public abstract class ${model.f_DaoBaseClass}
    extends ${Prefix}AbstractDao<${model.f_Class},${model.primaryKeyField.f_Type}>
    implements ${model.f_DaoConstantsIF}
{
$utility.protocol("constructor")

    public ${model.f_DaoBaseClass}()
    {
        super();
    }

$utility.protocol("override")

    @Override
    protected Class<${model.f_Class}> getPersistentClass()
    {
        return ${model.f_Class}.class;
    }

    @Override
    protected String getTableName()
    {
        return "${model.f_sqlTable}";
    }

    @Override
    public ${model.f_CriteriaClass} createCriteria()
    {
        return new ${model.f_CriteriaClass}(_createCriteria());
    }

    @Override
    public ${model.f_CriteriaClass} createDetachedCriteria(String alias)
    {
        return new ${model.f_CriteriaClass}(_createDetachedCriteria(alias));
    }

    protected ${model.f_MetaClass} getMeta()
    {
        return ${model.f_Class}.Meta;
    }

$utility.protocol("find")

    public ${model.f_Class} find${model.primaryKeyField.f_Name}(${model.primaryKeyField.f_Type} e)
    {
        return getKey(e);
    }

    /**
     * Find the keys.
     * The resulting list may have a DIFFERENT size and sequence.
     */
    public KmList<${model.f_Class}> find${model.primaryKeyField.f_Names}(KmList<${model.primaryKeyField.f_Type}> ${model.primaryKeyField.f_names})
    {
        return find${model.primaryKeyField.f_Names}(${model.primaryKeyField.f_names}, false);
    }

    /**
     * Find the keys.
     * The resulting list will have the SAME size and sequence.
     */
    public KmList<${model.f_Class}> findOrdered${model.primaryKeyField.f_Names}(KmList<${model.primaryKeyField.f_Type}> ${model.primaryKeyField.f_names})
    {
        return find${model.primaryKeyField.f_Names}(${model.primaryKeyField.f_names}, true);
    }

    public KmList<${model.f_Class}> find${model.primaryKeyField.f_Names}(KmList<${model.primaryKeyField.f_Type}> ${model.primaryKeyField.f_names}, boolean ordered)
    {
        ${model.f_CriteriaClass} c;
        c = createCriteria();
        c.where${model.primaryKeyField.f_Name}().isIn(${model.primaryKeyField.f_names});
        KmList<${model.f_Class}> v = c.findAll();

        return ordered
            ? v.toOrderedList(${model.primaryKeyField.f_names}, e -> e.get${model.primaryKeyField.f_Name}())
            : v;
    }

$utility.protocol("delete")

    public void delete${model.primaryKeyField.f_Name}(${model.primaryKeyField.f_Type} e)
    {
        ${model.f_Class} m = find${model.primaryKeyField.f_Name}(e);

        if ( m == null )
            throw Kmu.newFatal("Cannot delete; key not found(%s).", e);

        delete(m);
    }
}
