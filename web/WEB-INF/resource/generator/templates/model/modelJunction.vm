${javaAutoGenerationComment}

package ${package}.criteria;

import com.kodemore.collection.*;
import com.kodemore.hibernate.*;
import com.kodemore.hibernate.basic.*;
import com.kodemore.time.*;
import com.kodemore.types.*;

import ${package}.dao.*;
import ${package}.dao.base.*;
import ${package}.dao.core.*;
import ${package}.filter.*;
import ${package}.model.*;
import ${package}.model.meta.*;

public class ${model.f_JunctionClass}
    extends KmhModelJunction
    implements ${model.f_DaoConstantsIF}
{
$utility.protocol("constructor")

    public ${model.f_JunctionClass}(KmhJunction context)
    {
        super(context);
    }

$utility.protocol("properties")

#foreach ( $field in $model.fields )
#if ( $field.isDaoProperty() )
    public ${field.f_CriteriaClass} where${field.f_Name}()
    {
        return new ${field.f_CriteriaClass_NoGeneric}(context(), alias(), ${field.f_NAME});
    }

#end
#end
$utility.protocol("associations")
#foreach ( $ass in $model.associations )
#if ( $ass.isMetaDao() )
#if ( $ass.isEditable() )
$utility.protocol("association (${ass.f_Name})")

//    public ${ass.modelReference.f_CriteriaClass} joinTo${ass.f_Name}()
//    {
//        return new ${ass.modelReference.f_CriteriaClass}(joinTo(${ass.f_NAME}));
//    }
//
//    public ${ass.modelReference.f_CriteriaClass} leftJoinTo${ass.f_Name}()
//    {
//        return new ${ass.modelReference.f_CriteriaClass}(leftJoinTo(${ass.f_NAME}));
//    }

    public ${ass.modelReference.primaryKeyField.f_CriteriaClass} where${ass.f_Name}${ass.modelReference.primaryKeyField.f_Name}()
    {
        return new ${ass.modelReference.primaryKeyField.f_CriteriaClass}(context(), alias(), ${ass.f_PK_NAME});
    }

    public void where${ass.f_Name}Is(${ass.modelReference.f_Class} e)
    {
        if ( e == null )
            where${ass.f_Name}${ass.modelReference.primaryKeyField.f_Name}().isNull();
        else
            where${ass.f_Name}${ass.modelReference.primaryKeyField.f_Name}().is(e.${ass.modelReference.primaryKeyField.f_getMethod}());
    }

    public void where${ass.f_Name}IsNot(${ass.modelReference.f_Class} e)
    {
        if ( e == null )
            where${ass.f_Name}${ass.modelReference.primaryKeyField.f_Name}().isNotNull();
        else
            where${ass.f_Name}${ass.modelReference.primaryKeyField.f_Name}().isNot(e.${ass.modelReference.primaryKeyField.f_getMethod}());
    }

#end
#end
#end

$utility.protocol("junction")

    public ${model.f_JunctionClass} addAnd()
    {
        return new ${model.f_JunctionClass}(context().addAnd());
    }

    public ${model.f_JunctionClass} addOr()
    {
        return new ${model.f_JunctionClass}(context().addOr());
    }

}
